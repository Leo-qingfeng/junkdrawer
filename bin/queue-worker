#!/usr/bin/perl
# vim:set ai sw=4 ts=4 et:

use Getopt::Std;
use Fcntl ':flock';

use strict;
use warnings;

our ($opt_d, $opt_v);

getopts "vd:" or exit 1;
my $program = join " ", @ARGV;

die "Usage: -d=DIRECTORY PROGRAM\n"
    unless $opt_d and $program;

sub verbose {
    warn @_ if $opt_v;
}

sub run {
    my ($fd, $file) = @_;

    my $pid = fork;

    unless (defined $pid) {
        die "fork: $!\n";
    }

    # Child
    if ($pid == 0) {
        open(STDIN, "<&", $fd) or die "dup: $!\n";
        close $fd;
        exec $program;
        exit 1;
    }

    close $fd;
    waitpid $pid, 0 or die "waitpid: $!\n";
    return $?;
}

my $fd;

while (my $file = <$opt_d/*>) {
    my ($links_before, $links_after);

    unless (-f $file) {
        next;
    }

    unless (open $fd, $file) {
        $!{ENOENT} or die "open: $file: $!\n";
        verbose "$file already handled by another process\n";
        next;
    }

    $links_before = (stat $fd)[3];

    unless (flock $fd, LOCK_EX|LOCK_NB) {
        $!{EWOULDBLOCK} or die "flock: $file: $!\n";
        verbose "$file locked by another process\n";
        next;
    }

    $links_after = (stat $fd)[3];

    unless ($links_before == $links_after) {
        verbose "$file already handled by another process (with scheduler idiosyncrasies)\n";
        close $fd;
        next;
    }

    verbose "Processing $file\n";

    unless (run($fd, $file) == 0) {
        verbose "Worker program returned non-zero, skipping for now\n";
        next;
    }

    unlink $file or die "unlink: $file: $!\n";
}

continue {
    close $fd;
}

verbose "Done\n"
