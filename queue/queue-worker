#!/usr/bin/perl
# vim:set ai sw=4 ts=4 et:

# Michael Toren <mct@toren.net>
# Public Domain

use Getopt::Std;
use Fcntl ':flock';

use strict;
use warnings;

our ($opt_d, $opt_s, $opt_v, $opt_m);

getopts "vd:s:m:" or exit 1;
my @program = @ARGV;

die "Usage: [-v] [-s SLEEP_TIME] [-m MAX] -d=DIRECTORY PROGRAM [ARGS ..]\n"
    unless $opt_d and @program;

sub verbose {
    warn @_ if $opt_v;
}

sub execute {
    my ($fd, $file) = @_;

    my $pid = fork;

    unless (defined $pid) {
        die "fork: $!\n";
    }

    # Child
    if ($pid == 0) {
        open(STDIN, "<&", $fd) or die "dup: $!\n";
        close $fd;
        exec { $program[0] } @program;
        exit 1;
    }

    close $fd;
    waitpid $pid, 0 or die "waitpid: $!\n";
    return $?;
}

sub runq {
    my ($fd, $num);

    while (my $file = <$opt_d/[1-9][0-9][0-9]*>) {
        my ($links_before, $links_after);

        if ($opt_m && $num++ >= $opt_m) {
            verbose "Reached maximum of $num entries\n";
            exit;
        }

        unless (-f $file) {
            next;
        }

        unless (open $fd, $file) {
            $!{ENOENT} or die "open: $file: $!\n";
            verbose "$file already handled by another process\n";
            next;
        }

        $links_before = (stat $fd)[3];

        unless (flock $fd, LOCK_EX|LOCK_NB) {
            $!{EWOULDBLOCK} or die "flock: $file: $!\n";
            verbose "$file locked by another process\n";
            next;
        }

        $links_after = (stat $fd)[3];

        unless ($links_before == $links_after) {
            verbose "$file already handled by another process (with scheduler idiosyncrasies)\n";
            close $fd;
            next;
        }

        verbose "Processing $file\n";

        unless (execute($fd, $file) == 0) {
            verbose "Worker program returned non-zero, skipping for now\n";
            next;
        }

        unlink $file or die "unlink: $file: $!\n";
    }

    continue {
        close $fd;
    }
}

$SIG{HUP} = sub { verbose "HUP\n" };

while (1) {
    runq;

    if ($opt_s) {
        verbose "Sleeping for $opt_s\n";
        sleep $opt_s;
    }
    else {
        verbose "Done\n";
        last;
    }
}
